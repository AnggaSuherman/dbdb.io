{
    "Email": "{ychu1@andrew.cmu.edu}",

    
    "Name": "{Dgraph}",
    
    
    "Description": "Dgraph is a high-scalable, low-latency and high-throughput distributed graph database. It emphasizes concurrency in distributed environment by minimizing network calls. It achieves good performance against Cayley and Neo4J by at least 10x factor faster in benchmark tests.",
    "Description Citations": [
        "{https://wiki.dgraph.io/Frequently_asked_questions#Why_build_Dgraph.3F}",
        "{https://wiki.dgraph.io/Frequently_asked_questions#Is_Dgraph_fast.3F}"
    ],
    
    
    "History": "In July 2015, Manish Rai Jain (founder of Dgraph Labs), came up with the idea of Dgraph from his previous experience at Google -- there he led a project to unite all data structures for serving web search with a backend graph system. The first version v0.1 was released in December 2015, with the goal **offering an open source, native and distributed graph database** never changes since then. VC investors like Blackbird Ventures and Bain Capital Ventures led a $1.45 million funding round in Dgraph in May 2016, which brings a good funding round for this amazing start-up.",
    "History Citations": [
        "{https://wiki.dgraph.io/Dgraph#History}",
        "{http://www.smartcompany.com.au/startupsmart/advice/startupsmart-funding/two-failed-startups-later-ex-google-employee-secures-1-45-million-in-funding-and-backing-of-atlassians-co-founder/}"
    ],
    
    
    "System Architecture Options": [
        "Shared-Nothing"
    ],
    "System Architecture Description": "Dgraph uses RAFT consensus algorithm for communication between servers. During each **term** (election cycle), voting is conducted to decide a single leader. Then there is unidirectional RPC communication from leader to followers, but they don't share disk naturally. Each server exposes a GRPC interface, which can then be called by the query processor to retrieve data. Clients must locate the cluster to interact with it. A client can randomly pick up any server in the cluster. If not picking a leader, the request should be rejected, and the leader information is passed along. The client can then re-route it's query to the leader.",
    "System Architecture Citations": [
        "{https://wiki.dgraph.io/Design_concepts#RAFT}"
    ],
    
    
    "Query Interface Options": [
        "Custom API"
    ],
    "Query Interface Description": "Dgraph uses a variation of [GraphQL](https://facebook.github.io/graphql/) (created by Facebook) called **GraphQL+-** as its query language because of GraphQL's graph-like query syntax, schema validation and subgraph shaped response. The difference is that **GraphQL+-** supports graph operations and has removed some inappropriate features considering graph database's special structure.",
    "Query Interface Citations": [
        "{https://docs.dgraph.io/v0.7.6/query-language/}",
        "{https://facebook.github.io/graphql/}"
    ],
    
    
    "Data Model Options": [
        "Key/Value"
    ],
    "Data Model Description": "In Dgraph, a `PostingList` contains all `DirectedEdge` corresponding to an `Attribute`, where each `DirectedEdge` consists of entity, attribute, value, etc. Note that posting lists are all served via RocksDB in a key-value format `(Predicate, Subject) --> PostingList`.",
    "Data Model Citations": [
        "{https://wiki.dgraph.io/Design_concepts#RocksDB}"
    ],
    
    
    "Storage Model Options": [
        "Custom"
    ],
    "Storage Model Description": "Dgraph utilizes RocksDB (an application library rather than a database) to help with key-value storage of posting lists on disk. However, all data handling still happens at Dgraph level rather than RocksDB. RocksDB functions as an interface of disk for Dgraph.",
    "Storage Model Citations": [
        "{https://wiki.dgraph.io/Frequently_asked_questions}"
    ],
    
        
    "Storage Architecture Options": [
        "Hybrid"
    ],
    "Storage Architecture Description": "RocksDB library would decide how data are served out of memory, SSD or disk. In order to proceed processing, updates to posting lists can be stored in memory as an overlay over immutable `Posting list`. Two separate update layers are provided for replacing and addition/deletion respectively, which allows iteration over `Posting`s in memory without fetching things from disk.",
    "Storage Architecture Citations": [
        "{https://wiki.dgraph.io/Design_concepts}"
    ],
    
    
    "Concurrency Control Options": [
        "Not Supported"
    ],
    "Concurrency Control Description": "Dgraph's main focus is low latency and high throughput. It references the design of Google's Bigtable and Facebook's Tao, and achieves high scalability at the cost of lack of full ACID compliant transactional support. Also, value data versioning is under consideration, and not yet implemented",
    "Concurrency Control Citations": [
        "{https://wiki.dgraph.io/Dgraph_compared_to_other_databases}",
        "{https://wiki.dgraph.io/Design_concepts#Versioning}"
    ],
    
    
    "Isolation Levels Options": [
        "Read Uncommitted"
    ],
    "Isolation Levels Description": "Dgraph does not support transactions at this point. A mutation can be composed of multiple edges where each edge might belong to a different `PostingList`. Dgraph acquires `RWMutex` locks at a posting list level. It does not acquire locks across multiple posting lists. For writes, some edges would get written before others, and so any reads which happen while a mutation is going on would read partially committed data. However, there's a guarantee of durability. When a mutation succeeds, any successive reads will read the updated data in its entirety.",
    "Isolation Levels Citations": [
        "{https://wiki.dgraph.io/Dgraph#Note_on_Transactions}"
    ],
    
    
    "Indexes Options": [
        "Hash Table"
    ],
    "Indexes Description": "Dgraph relies on RocksDB to serve PostingLists and provide indexing. Here RocksDB uses key-value format to make radom lookups efficient, and supports faster hash-based index in plain table compared with block-based table.",
    "Indexes Citations": [
        "{https://wiki.dgraph.io/Design_concepts#RocksDB}",
        "{https://github.com/dgraph-io/dgraph/blob/3269e3df2582ad06901230c50b38d8745d1d4f73/vendor/github.com/cockroachdb/c-rocksdb/internal/table/plain_table_index.cc}",
        "{https://github.com/facebook/rocksdb/wiki/A-Tutorial-of-RocksDB-SST-formats}"
    ],
    
    
    "Foreign Keys Options": [
        "Not Supported"
    ],
    "Foreign Keys Description": "In contrast to foreign key in relational database, nodes in graph database don't possess properties. Foreign relationships are represented by *edges* and should not exist implicitly. In Dgraph, creating relationships on top of data is the only way to model the data.",
    "Foreign Keys Citations": [
        "{https://github.com/dgraph-io/dgraph/blob/a85a5b9494863af28daf73f8ccb3fd848907811e/wiki/content/guides/intro-to-graphs.md}"
    ],
    
    
    "Logging Options": [
        "Logical Logging"
    ],
    "Logging Description": "Dgraph's logging scheme is **close to logical logging**. Every **mutation** is logged and then synced to disk via append-only log. Additionally, 2 layers of mutation responsible for replacing and addition/deletion respectively can log mutations in memory, allowing periodical garbage colleciton for dirty posting list via RocksDB. This reduces the need for recreating the posting lists.",
    "Logging Citations": [
        "{https://wiki.dgraph.io/Design_concepts#Commit_Logs}"
    ],
    
    
    "Checkpoints Options": [
        "Non-Blocking",
        "Consistent"
    ],
    "Checkpoints Description": "The checkpoint scheme is not mentioned in Dgraph documentation. Therefore, questions are raised in Dgraph slack group. The above answer was provided by developers directly, but details were not revealed.",
    "Checkpoints Citations": [
        "{https://dgraph.slack.com/messages/C13LH03RR/}"
    ],
    
    
    "Views Options": [
        "Not Supported"
    ],
    "Views Description": "No *view* is found in Dgraph wiki or discussion",
    "Views Citations": [
    ],
    
    
    "Query Execution Options": [
        "Tuple-at-a-Time Model"
    ],
    "Query Execution": "Dgraph is a distributed database system, therefore a query may involve different tablets on various server instances. The major cost is network call rather than cache miss. Tricks for in-memory database are not applicable here -- no *row batch fitting in cache* exists here. Also, there is no materialized view. Each follower server uses RPC to communicate its result to the master server in `PostingList` format.",
    "Query Execution Citations": [
        "{https://wiki.dgraph.io/Design_concepts#Queries}"
    ],
    
    
    "Stored Procedures Options": [
        "Supported"
    ],
    "Stored Procedures Description": "Functions can only be applied to [indexed attributes](https://wiki.dgraph.io/Query_Language#Indexing). Some pre-defined functions like term matching, inequality and geolocation are provided. Users only need to fill in the parameters to do customized procedures.",
    "Stored Procedures Citations": [
        "{https://wiki.dgraph.io/Query_Language#Functions}"
    ],

    
    "Joins Options": [
        "Hash"
    ],
    "Joins Description": "Dgraph's `PostingList` structure stores all `DirectedEdges` corresponding to an `Attribute` in the format of `Attribute: Entity -> sorted list of ValueId`, which already consists of all data needed for a join. Therefore, each RPC call to the cluster would result in only one join rather than multiple joins. Join operation is reduced to lookup rather than application layer.",
    "Joins Citations": [
        "{https://docs.dgraph.io/v0.7.4/design-concepts}",
        "{https://docs.dgraph.io/v0.7.4/faq/}"
    ],
    
    
    "Query Compilation Options": [
        "Not Supported"
    ],
    "Query Compilation Description": "No *query compilation* related knowledge is found in Dgraph wiki or discussion",
    "Query Compilation Citations": [
    ],
    
    
    "Website": "{https://dgraph.io/}",
    
    
    "Programming Language": [
        "Go"
    ],
    
    
    "Operating Systems": [
        "Linux",
        "OS X"
    ],
    
    
    "Project Type": [
        "Commercial"
    ],
    
    
    "Developer": "{DGraph Labs, Inc}",
    
    
    "Start Date": "{2015-07}",
    "Start Date Citations": [
        "{https://wiki.dgraph.io/Dgraph#History}"
    ],
    
    
    "End Date": "{On-going}",
    "End Date Citations": [
        "{https://wiki.dgraph.io/Dgraph#History}"
    ],
    
    
    "Derived From": "{N/A, designed from ground-up}",
    
    
    "License": [
        "Apache v2"
    ]
}